knn_con_2 = table(true = testset$Species, model = knn_pred_2)
#ROC
prob<-attr(knn_pred_2,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr3 <- prediction(prob, testset$Species)
prf3 <- performance(pr3, measure = "tpr", x.measure = "fpr")
plot(prf3,add=TRUE,col='green')
## KNN  1
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_1 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 1,prob = T
)
# Confusion matrix.
knn_con_1 = table(true = testset$Species, model = knn_pred_1)
#ROC
prob<-attr(knn_pred_1,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr4 <- prediction(prob, testset$Species)
prf4 <- performance(pr4, measure = "tpr", x.measure = "fpr")
plot(prf4,add=TRUE,col='purple')
legend('bottomright',c("Logistic Regression","linear discriminant analysis","3-NN classification","2-NN classification","1-NN classification"),lty=c(1,1),lwd=c(1.5,1.5),col=c('black','red','blue','green','purple'))
library(ROCR)
library(class)
## Part I
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
## Part II
# Fit logistic model on training data. Use family = binomial for logistic.
log_model = glm(Species ~ Sepal.Length, data = trainset,
family = binomial)
log_pred = predict(log_model, testset, type = "response")
# Convert predictions to 1 or 2, for category 1 or 2 respectively.
log_pred = (log_pred > 0.5) + 1
# Convert predictions to spam or ham, same category order as original data.
log_pred = levels(trainset$Species)[log_pred]
# Make a confusion matrix by tabulating true classes against predicted classes.
log_con = table(true = testset$Species, model = log_pred)
# ROC
logpred = predict(log_model, testset, type = "response")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr <- prediction(logpred, testset$Species)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf,col='black',main = "ROC of Three classification Method")
## Part III
## linear discriminant analysis
library(MASS)
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
# Fitting LDA
lda_model = lda(Species ~ Sepal.Length, data = trainset)
lda_pred = predict(lda_model, testset, type = "response")$class
# Make a confusion matrix by tabulating true classes against predicted classes.
lda_con = table(true = testset$Species, model = lda_pred)
ldapred = predict(lda_model, testset, type = "response")$posterior[,2]
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr1 <- prediction(ldapred, testset$Species)
prf1 <- performance(pr1, measure = "tpr", x.measure = "fpr")
plot(prf1,add=TRUE,col='red')
## Part IV
## k-NN classification
## KNN  3
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_3 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 3,prob = T
)
# Confusion matrix.
knn_con_3 = table(true = testset$Species, model = knn_pred_3)
#ROC
prob<-attr(knn_pred_3,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr2 <- prediction(prob, testset$Species)
prf2 <- performance(pr2, measure = "tpr", x.measure = "fpr")
plot(prf2,add=TRUE,col='blue')
## KNN  2
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_2 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 2,prob = T
)
# Confusion matrix.
knn_con_2 = table(true = testset$Species, model = knn_pred_2)
#ROC
prob<-attr(knn_pred_2,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr3 <- prediction(prob, testset$Species)
prf3 <- performance(pr3, measure = "tpr", x.measure = "fpr")
plot(prf3,add=TRUE,col='green')
## KNN  1
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_1 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 1,prob = T
)
# Confusion matrix.
knn_con_1 = table(true = testset$Species, model = knn_pred_1)
#ROC
prob<-attr(knn_pred_1,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr4 <- prediction(prob, testset$Species)
prf4 <- performance(pr4, measure = "tpr", x.measure = "fpr")
plot(prf4,add=TRUE,col='purple')
legend('bottomright',c("Logistic Regression","linear discriminant analysis","3-NN classification","2-NN classification","1-NN classification"),lty=c(1,1),lwd=c(1.5,1.5),col=c('black','red','blue','green','purple'))
library(rstudioapi)
library(rstudioapi)
library(stringr)
injury = data.frame(expand.grid( injury= factor(c("No","Yes")),seatbelt = factor(c("no","yes")), location =
factor(c("urban", "rural")),gender = factor(c("female","male"))) ,
count = c(7287,996,11587,759,3246,973,6134,757,10381,812,10969,380,6123,1084,6693,513))
model2 = glm(count~.^2,data = injury,family = poisson)
model22 = glm(count~injury+seatbelt+location+gender+gender:injury+injury:location+injury:seatbelt+
gender:location:seatbelt,data = injury,family = poisson)
summary(model2)
model22 = glm(count~injury+seatbelt+location+gender+gender:injury+injury:location+injury:seatbelt+
gender:location:seatbelt,data = injury,family = poisson)
summary(model2)
injury2 = injury
injury2$count = model22$fitted.values
summary(model22)
injury2
rates = c(2/18.793,32/52.407)
rates
rates = c(2/18.793,32/52.407,12/10.673,104/43.248,28/5710,206/28.612,28/2.585,186/12.663,31/1.462,102/5.317)
rates
doctor = fdata.frame(expand.grid( age= factor(c("35-44","45-54","55-64","65-74","75-84")),smoke = factor(c("Nonsmoker","Smoker")) ) ,
count = rates)
doctor = data.frame(expand.grid( age= factor(c("35-44","45-54","55-64","65-74","75-84")),smoke = factor(c("Nonsmoker","Smoker")) ) ,
count = rates)
doctor
injury = data.frame(expand.grid( injury= factor(c("No","Yes")),seatbelt = factor(c("no","yes")), location =
factor(c("urban", "rural")),gender = factor(c("female","male"))) ,
count = c(7287,996,11587,759,3246,973,6134,757,10381,812,10969,380,6123,1084,6693,513))
injury
rates = c(2/18.793,12/10.673,28/5710,28/2.585,31/1.462,32/52.407,104/43.248,206/28.612,186/12.663,102/5.317)
doctor = data.frame(expand.grid( age= factor(c("35-44","45-54","55-64","65-74","75-84")),smoke = factor(c("Nonsmoker","Smoker")) ) ,
count = rates)
doctor
rates = c(2/18.793,12/10.673,28/5.710,28/2.585,31/1.462,32/52.407,104/43.248,206/28.612,186/12.663,102/5.317)
doctor = data.frame(expand.grid( age= factor(c("35-44","45-54","55-64","65-74","75-84")),smoke = factor(c("Nonsmoker","Smoker")) ) ,
count = rates)
doctor
doctor$count[1:4]
doctor$count[1:5]
doctor$count[1:5]/doctor$count[6:10]
doctor$count[6:10]
model1 = glm(count~.,data = doctor,family = poisson)
doctor = data.frame(expand.grid( age= factor(c("35-44","45-54","55-64","65-74","75-84")),smoke = factor(c("Nonsmoker","Smoker")) ) ,
count = as.numeric(rates))
doctor
model1 = glm(count~.,data = doctor,family = poisson)
summary(model1)
model1
model1 = glm(count~age+smoke,data = doctor,family = poisson)
summary(model1)
model1 = glm(count~.,data = doctor,family = poisson)
model11 = loglm(count~.,data = doctor,param=T)
library(MASS)
model11 = loglm(count~.,data = doctor,param=T)
model11
summary(model11)
model2 = glm(count~.^2,data = doctor,family = poisson)
summary(model2)
model1 = glm(log(count)~.,data = doctor,family = poisson)
model11 = loglm(log(count)~.,data = doctor,param=T)
library(readr)
data <- read_csv("C:/Users/Ash/Desktop/sta138 final project/data.txt")
View(data)
strsplit(data[1,])
strsplit(data[1,],' ')
strsplit(data[1],' ')
data[1]
data[1,]
data[2,]
as.character(data[1,])
strsplit(as.character(data[1,])," ")
unlist(strsplit(as.character(data[1,])," "))
unlist(strsplit(as.character(data[1,])," "))
a=unlist(strsplit(as.character(data[1,])," "))
a[a!=""]
a=1.111
numeric(a)
double(a)
a
as.numeric(a)
a = numeric()
a=
a
_)
a
a = 1.11
a
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,])))
data[i,]= tmp[tmp!=""]
}
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,]," ")))
data[i,]= tmp[tmp!=""]
}
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,]," ")))
data[i,]= tmp[tmp!=""]
}
strsplit(as.character(data[1,])," ")
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,])," "))
data[i,]= tmp[tmp!=""]
}
View(data)
mydata = data.frame()
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,])," "))
mydata[i,]= tmp[tmp!=""]
}
warning()
warnings()
View(mydata)
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,])," "))
mydata[i,]<- tmp[tmp!=""]
}
mydata = data.frame(stringsAsFactors = F,,dav = numeric(),pcs=numeric(),mcs = numeric(),beck = numeric(),pgend =numeric(),age=numeric(),educat = numeric() )
mydata = data.frame(stringsAsFactors = F,,dav = numeric(),pcs=numeric(),mcs = numeric(),beck = numeric(),pgend =numeric(),age=numeric(),educat = numeric() )
mydata = data.frame(stringsAsFactors = F,dav = numeric(),pcs=numeric(),mcs = numeric(),beck = numeric(),pgend =numeric(),age=numeric(),educat = numeric() )
i=1
tmp = unlist(strsplit(as.character(data[i,])," "))
mydata[i,]<- tmp[tmp!=""]
View(mydata)
data <- read_csv("C:/Users/Ash/Desktop/sta138 final project/data.txt")
mydata = data.frame(stringsAsFactors = F,dav = numeric(),pcs=numeric(),mcs = numeric(),beck = numeric(),pgend =numeric(),age=numeric(),educat = numeric() )
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,])," "))
mydata[i,]<- tmp[tmp!=""]
}
mydata
library(MASS)
fit<-glm(dav~.,data = mydata,family = "binomial")
mydata$dav = as.logical(mydata$dav)
mydata$dav = as.logical(mydata$dav)
fit<-glm(dav~.,data = mydata,family = "binomial")
fit<-glm(dav~pcs+mcs,data = mydata,family = "binomial")
fit=glm(dav~pcs+mcs,data = mydata,family = "binomial")
mydata$dav[1]
View(mydata)
mydata = data.frame(stringsAsFactors = F,dav = factor(c(0,1)),pcs=numeric(),mcs = numeric(),beck = numeric(),pgend =numeric(),age=numeric(),educat = numeric() )
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,])," "))
mydata[i,]<- tmp[tmp!=""]
}
View(mydata)
mydata = data.frame(stringsAsFactors = F,dav = factor(c(0,1)),pcs=numeric(),mcs = numeric(),beck = numeric(),pgend = factor(c(0,1)),age=numeric(),educat = numeric() )
for(i in 1: nrow(data))
mydata = data.frame(stringsAsFactors = F,dav = factor(c(0,1)),pcs=numeric(),mcs = numeric(),beck = numeric(),pgend = factor(c(0,1)),age=numeric(),educat = numeric() )
View(mydata)
library(MASS)
data <- read_csv("C:/Users/Ash/Desktop/sta138 final project/data.txt")
mydata = data.frame(stringsAsFactors = F,dav = factor(c(0,1)),pcs=numeric(),mcs = numeric(),beck = numeric(),pgend = factor(c(0,1)),age=numeric(),educat = numeric() )
mydata = data.frame(stringsAsFactors = F,dav = factor(c(0,1)),pcs=numeric(),mcs = numeric(),beck = numeric(),pgend = numeric(),age=numeric(),educat = numeric() )
mydata = data.frame(stringsAsFactors = F,dav = numeric(),pcs=numeric(),mcs = numeric(),beck = numeric(),pgend = numeric(),age=numeric(),educat = numeric() )
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,])," "))
mydata[i,]<- tmp[tmp!=""]
}
mydata$dav
typeof(mydata$dav[1])
for(i in 1: nrow(data))
{
tmp = as.numeric(unlist(strsplit(as.character(data[i,])," ")))
mydata[i,]<- tmp[tmp!=""]
}
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,])," "))
mydata[i,]<- tmp[tmp!=""]
}
View(mydata)
mydata$dav = as.numeric(mydata$dav)
typeof(mydata$dav)
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,])," "))
mydata[i,]<- as.numeric(tmp[tmp!=""])
}
View(mydata)
typeof(mydata$dav)
fit=glm(dav~.,data = mydata,family = "binomial")
fit=glm(dav~pcs,data = mydata,family = "binomial")
View(mydata)
mydata$dav <- factor(mydata$dav)
mydata$pgend <- factor(mydata$pgend)
fit=glm(dav~pcs,data = mydata,family = "binomial")
mydata$dav[1]
mydata$dav
fit=glm(dav~pcs,data = mydata,family = "binomial" ,control = list(maxit = 50))
summary(fit)
View(mydata)
library(rstudioapi)
library(MASS)
library(rstudioapi)
this.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(this.dir)
data <- read_csv("C:/Users/Ash/Desktop/sta138 final project/data.txt")
mydata = data.frame(stringsAsFactors = F,dav = numeric(),pcs=numeric(),mcs = numeric(),beck = numeric(),pgend = numeric(),age=numeric(),educat = numeric() )
for(i in 1: nrow(data))
{
tmp = unlist(strsplit(as.character(data[i,])," "))
mydata[i,]<- as.numeric(tmp[tmp!=""])
}
write.csv(mydata,file = "mydata.csv")
library(readr)
mydata <- read_csv("C:/Users/Ash/Desktop/sta138 final project/mydata.csv")
View(mydata)
mydata <- read_csv("C:/Users/Ash/Desktop/sta138 final project/mydata.csv")
mydata$dav <- factor(mydata$dav)
mydata$pgend <- factor(mydata$pgend)
fit=glm(dav~pcs,data = mydata,family = "binomial" ,control = list(maxit = 50))
fit
fit=glm(dav~.,data = mydata,family = "binomial" )
summary(fit)
fit=glm(dav~.,data = mydata,family = "binomial" )
step <- stepAIC(fit, direction="both")
step$anova # display results
step <- stepAIC(fit, direction="forward")
step$anova # display results
fitnull=glm(dav~,data = mydata,family = "binomial" )
fitnull=glm(dav~1,data = mydata,family = "binomial" )
summary(fitnull)
step <- stepAIC(fitnull, direction="forward")
step$anova # display results
fitfull=glm(dav~.,data = mydata,family = "binomial" )
step <- stepAIC(fitfull, direction="forward")
step$anova # display results
fitfull=glm(dav~.,data = mydata,family = "binomial" )
step <- stepAIC(fitfull, direction="both")
step$anova # display results
library(rstudioapi)library(leaps)
library(leaps)
install.packages("leap")
install.packages("Leap")
install.packages("LEAP")
step <-step(full, data=mydata, direction="backward")
full=glm(dav~.,data = mydata,family = "binomial" )
null=glm(dav~1,data = mydata,family = "binomial" )
step <-step(full, data=mydata, direction="backward")
step$anova # display results
step <-step(null, data=mydata, direction="forward")
step$anova # display results
step(null, scope=list(lower=null, upper=full), direction="forward")
step$anova # display results
step$anova # display results
step <-step(full, data=mydata, direction="backward")
step(null, scope=list(lower=null, upper=full), direction="forward")
summary(step)
full=glm(dav~.,data = mydata,family = "binomial" )
null=glm(dav~1,data = mydata,family = "binomial" )
step <-step(full, data=mydata, direction="backward")
summary(step)
step(null, scope=list(lower=null, upper=full), direction="forward")
summary(step)
full=glm(dav~.,data = mydata,family = "binomial" )
null=glm(dav~1,data = mydata,family = "binomial" )
step1 <-step(full, data=mydata, direction="backward")
step2 <-step(null, scope=list(lower=null, upper=full), direction="forward")
summary(step1)
summary(step2)
step$model
full=glm(dav~.,data = mydata,family = "binomial" )
null=glm(dav~1,data = mydata,family = "binomial" )
step2 <-step(null, scope=list(lower=null, upper=full), direction="forward")
summary(step2)
step2 <-step(null, scope=list(lower=null, upper=full), direction="forward")
step1 <-step(full, data=mydata, direction="backward")
summary(step1)
mydata
mydata = mydata[,2:length(mydata)]
mydata
full=glm(dav~.,data = mydata,family = "binomial" )
null=glm(dav~1,data = mydata,family = "binomial" )
step1 <-step(full, data=mydata, direction="backward")
step2 <-step(null, scope=list(lower=null, upper=full), direction="forward")
step2 <-step(null, scope=list(lower=null, upper=full), direction="forward")
summary(step2)
step1 <-step(full, data=mydata, direction="backward")
fit = glm(dav~mcs+beck+pgend+age+educat,data = mydata,family = "binomial" )
summary(fit)
AIC(fit)
fit = glm(dav~mcs+beck+pgend+age+educat,data = mydata,family = "binomial" )
AIC(fit)
BIV(fit)
BIC(fit)
hoslem.test(fit$dav, fitted(fit), g=10)
library(ResourceSelection)
install.packages("Resourceselection")
install.packages("ResourceSelection")
library(ResourceSelection)
AIC(fit)
BIC(fit)
hoslem.test(fit$dav, fitted(fit), g=10)
fitted(fit)
fit$y
hoslem.test(fit$y, fitted(fit), g=8)
AIC(fit)
BIC(fit)
c(AIC(fit),AIC(null))
c(BIC(fit),BIC(null))
rownames(a)=c("Intercept and Vovariates","Intercept Only")
a = c(AIC(fit),AIC(null))
a = rbind(c(BIC(fit),BIC(null)))
rownames(a)=c("Intercept and Vovariates","Intercept Only")
a
a = c(AIC(fit),AIC(null))
a = rbind(a,c(BIC(fit),BIC(null)))
rownames(a)=c("Intercept and Vovariates","Intercept Only")
a
colname(a) = c("AIC","BIC")
a = c(AIC(fit),AIC(null))
a = rbind(a,c(BIC(fit),BIC(null)))
rownames(a)=c("Intercept and Vovariates","Intercept Only")
colnames(a) = c("AIC","BIC")
a
a''
t(a)
rownames(a)=c("Intercept and Covariates","Intercept Only")
colnames(a) = c("AIC","BIC")
t(a)
a
hoslem.test(fit$y, fitted(fit), g=8)
pearson <- residuals(fit, "pearson")
stdpearson = resid(fit, type='pearson')/sqrt(1 - hatvalues(fit))
plot(x = fit$fitted.values, pearson, main = "Standardized Pearson Residual VS Fitted Value")
plot(x = fit$fitted.values, stdpearson, main = "Standardized Pearson Residual VS Fitted Value")
plot(fit)
plot(x = fit$fitted.values, stdpearson, main = "Standardized Pearson Residual VS Fitted Value")
plot(x = mydata$educat, stdpearson, main = "Standardized Pearson Residual VS Fitted Value")
plot(x = mydata$age, stdpearson, main = "Standardized Pearson Residual VS Fitted Value")
plot(x = mydata$age, stdpearson, main = "Standardized Pearson Residual VS AGE")
summary(fit)
fit = glm(dav~mcs+beck+pgend+educat,data = mydata,family = "binomial" )
summary(fit)
fit = glm(dav~mcs+beck+pgend+age+educat,data = mydata,family = "binomial" )
summary(fit)
