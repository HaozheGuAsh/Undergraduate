sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_1 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 1,prob = T
)
# Confusion matrix.
knn_con_1 = table(true = testset$Species, model = knn_pred_1)
#ROC
prob<-attr(knn_pred_1,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr4 <- prediction(prob, testset$Species)
prf4 <- performance(pr4, measure = "tpr", x.measure = "fpr")
plot(prf4,add=TRUE,col='purple')
legend('bottomright',c("Logistic Regression","linear discriminant analysis","3-NN classification","2-NN classification","1-NN classification"),lty=c(1,1),lwd=c(1.5,1.5),col=c('black','red','blue','green','purple'))
library(ROCR)
library(class)
## Part I
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
## Part II
# Fit logistic model on training data. Use family = binomial for logistic.
log_model = glm(Species ~ Sepal.Length, data = trainset,
family = binomial)
log_pred = predict(log_model, testset, type = "response")
# Convert predictions to 1 or 2, for category 1 or 2 respectively.
log_pred = (log_pred > 0.5) + 1
# Convert predictions to spam or ham, same category order as original data.
log_pred = levels(trainset$Species)[log_pred]
# Make a confusion matrix by tabulating true classes against predicted classes.
log_con = table(true = testset$Species, model = log_pred)
# ROC
logpred = predict(log_model, testset, type = "response")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr <- prediction(logpred, testset$Species)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf,col='black',main = "ROC of Three classification Method")
## Part III
## linear discriminant analysis
library(MASS)
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
# Fitting LDA
lda_model = lda(Species ~ Sepal.Length, data = trainset)
lda_pred = predict(lda_model, testset, type = "response")$class
# Make a confusion matrix by tabulating true classes against predicted classes.
lda_con = table(true = testset$Species, model = lda_pred)
ldapred = predict(lda_model, testset, type = "response")$posterior[,2]
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr1 <- prediction(ldapred, testset$Species)
prf1 <- performance(pr1, measure = "tpr", x.measure = "fpr")
plot(prf1,add=TRUE,col='red')
## Part IV
## k-NN classification
## KNN  3
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_3 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 3,prob = T
)
# Confusion matrix.
knn_con_3 = table(true = testset$Species, model = knn_pred_3)
#ROC
prob<-attr(knn_pred_3,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr2 <- prediction(prob, testset$Species)
prf2 <- performance(pr2, measure = "tpr", x.measure = "fpr")
plot(prf2,add=TRUE,col='blue')
## KNN  2
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_2 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 2,prob = T
)
# Confusion matrix.
knn_con_2 = table(true = testset$Species, model = knn_pred_2)
#ROC
prob<-attr(knn_pred_2,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr3 <- prediction(prob, testset$Species)
prf3 <- performance(pr3, measure = "tpr", x.measure = "fpr")
plot(prf3,add=TRUE,col='green')
## KNN  1
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_1 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 1,prob = T
)
# Confusion matrix.
knn_con_1 = table(true = testset$Species, model = knn_pred_1)
#ROC
prob<-attr(knn_pred_1,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr4 <- prediction(prob, testset$Species)
prf4 <- performance(pr4, measure = "tpr", x.measure = "fpr")
plot(prf4,add=TRUE,col='purple')
legend('bottomright',c("Logistic Regression","linear discriminant analysis","3-NN classification","2-NN classification","1-NN classification"),lty=c(1,1),lwd=c(1.5,1.5),col=c('black','red','blue','green','purple'))
library(rstudioapi)
atxt = "Text processing is here to stay! A new lesson starts here!"
sub("new,"oldd)
grepl("[abc]{,3}")
grepl("[abc]{,3}")
x = as.matrix(1,2,3)
x = as.matrix(1,2,3)
x
a = 2
a*2
d
two_markets <- read_delim("two-markets.DAT", " ", escape_double = FALSE, trim_ws = TRUE)
Bio = two_markets[,1:3]
Energy = two_markets[,4:5]
ccal<-cc(X=Bio,Y = Energy)
library(rstudioapi)
library(CCA)
library(ggplot2)
this.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(this.dir)
################# 2 #################
two_markets <- read_delim("two-markets.DAT", " ", escape_double = FALSE, trim_ws = TRUE)
Bio = two_markets[,1:3]
Energy = two_markets[,4:5]
ccal<-cc(X=Bio,Y = Energy)
matcor(Bio,Energy)
ccal$cor
#Test
ev <- (1 - ccal$cor^2)
n <- dim(Bio)[1]
p <- length(Bio)
q <- length(Energy)
k <- min(p, q)
m <- n - 3/2 - (p + q)/2
w <- rev(cumprod(rev(ev)))
ev <- (1 - ccal$cor^2)
matcor(Bio,Energy)
two_markets <- read_delim("two-markets.DAT", " ", escape_double = FALSE, trim_ws = TRUE)
library(rstudioapi)
library(CCA)
library(ggplot2)
this.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(this.dir)
two_markets <- read_delim("two-markets.DAT", " ", escape_double = FALSE, trim_ws = TRUE)
library(readr)
this.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(this.dir)
two_markets <- read_delim("two-markets.DAT", " ", escape_double = FALSE, trim_ws = TRUE)
Bio = two_markets[,1:3]
Energy = two_markets[,4:5]
ccal<-cc(X=Bio,Y = Energy)
matcor(Bio,Energy)
ccal$cor
ev <- (1 - ccal$cor^2)
n <- dim(Bio)[1]
p <- length(Bio)
q <- length(Energy)
k <- min(p, q)
m <- n - 3/2 - (p + q)/2
w <- rev(cumprod(rev(ev)))
d1 <- d2 <- f <- vector("numeric", k)
for (i in 1:k) {
s <- sqrt((p^2 * q^2 - 4)/(p^2 + q^2 - 5))
si <- 1/s
d1[i] <- p * q
d2[i] <- m * s - p * q/2 + 1
r <- (1 - w[i]^si)/w[i]^si
f[i] <- r * d2[i]/d1[i]
p <- p - 1
q <- q - 1
}
pv <- pf(f, d1, d2, lower.tail = FALSE)
(dmat <- cbind(WilksL = w, F = f, df1 = d1, df2 = d2, p = pv))
n
p
q
p <- length(Bio)
p
ev <- (1 - ccal$cor^2)
n <- dim(Bio)[1]
p <- length(Bio)
q <- length(Energy)
k <- min(p, q)
m <- n - 3/2 - (p + q)/2
w <- rev(cumprod(rev(ev)))
d1 <- d2 <- f <- vector("numeric", k)
for (i in 1:k) {
s <- sqrt((p^2 * q^2 - 4)/(p^2 + q^2 - 5))
si <- 1/s
d1[i] <- p * q
d2[i] <- m * s - p * q/2 + 1
r <- (1 - w[i]^si)/w[i]^si
f[i] <- r * d2[i]/d1[i]
p <- p - 1
q <- q - 1
}
pv <- pf(f, d1, d2, lower.tail = FALSE)
(dmat <- cbind(WilksL = w, F = f, df1 = d1, df2 = d2, p = pv))
p
q
k
w <- rev(cumprod(rev(ev)))
ev <- (1 - ccal$cor^2)
n <- dim(Bio)[1]
p <- length(Bio)
q <- length(Energy)
k <- min(p, q)
m <- n - 3/2 - (p + q)/2
w <- rev(cumprod(rev(ev)))
w
d1 <- d2 <- f <- vector("numeric", k)
d1
d2
i=1
pf()
rev(2)
rev(1)
d1 = (p-1+1)(q-1+1)
d1 = (p-1+1)*(q-1+1)
d1
ln(1)
exp(1)
log(1)
log(w[1])
w[1]
t1stat = -log(w[1])*(m)
t1range = qchisq(1-0.05,df)
df = (p-1+1)*(q-1+1)
t1stat = -log(w[1])*(m)
t1range = qchisq(1-0.05,df)
t1stat
t1range
Bio
p
w
p = p-1;q=q-1
p = p-1;q=q-1
df = (p-1+1)*(q-1+1)
m <- n - 3/2 - (p + q)/2
t2stat = -log(w[2])*m
t2critical = qchisq(1-0.05,df)
t2stat
p
1
q
p
p <- length(Bio)
q <- length(Energy)
p = p-1;q=q-1
df = (p-1+1)*(q-1+1)
m <- n - 3/2 - (p + q)/2
t2stat = -log(w[2])*m
t2critical = qchisq(1-0.05,df)
p
q
t2critical
t2stat
m
k <- min(p, q)
m <- n - 3/2 - (p + q)/2
w <- rev(cumprod(rev(ev)))
df = (p-1+1)*(q-1+1)
t1stat = -log(w[1])*(m)
t1critical = qchisq(1-0.05,df)
m <- n - 3/2 - (p + q)/2
t2stat = -log(w[2])*m
p = p-1;q=q-1
df = (p-1+1)*(q-1+1)
t2critical = qchisq(1-0.05,df)
ev <- (1 - ccal$cor^2)
n <- dim(Bio)[1]
p <- length(Bio)
q <- length(Energy)
k <- min(p, q)
m <- n - 3/2 - (p + q)/2
w <- rev(cumprod(rev(ev)))
df = (p-1+1)*(q-1+1)
t1stat = -log(w[1])*(m)
t1critical = qchisq(1-0.05,df)
m <- n - 3/2 - (p + q)/2
t2stat = -log(w[2])*m
p = p-1;q=q-1
df = (p-1+1)*(q-1+1)
t2critical = qchisq(1-0.05,df)
p
t2stat
t2critical
ccal.out$xcoef
two_markets <- read_delim("two-markets.DAT", " ", escape_double = FALSE, trim_ws = TRUE)
Bio = two_markets[,1:3]
Energy = two_markets[,4:5]
ccal<-cc(X=Bio,Y = Energy)
matcor(Bio,Energy)
ccal.out$xcoef
ccal$xcoef
ccal$ycoef
ccal[3:6]
ccal$xcoef
ccal$ycoef
colnames(cca1$xcoef) <- paste0("U", 1:3)
colnames(ccal$xcoef) <- paste0("U", 1:3)
colnames(ccal$xcoef) <- paste0("U", 1:2)
kable(ccal$xcoef)
library(methods)
colnames(ccal$xcoef) <- paste0("U", 1:2)
kable(ccal$xcoef)
library(knitr)
library(knitr)
install.packages("knitr")
library(knitr)
kable(ccal$xcoef)
colnames(ccal$xcoef) <- paste0("U", 1:3)
two_markets <- read_delim("two-markets.DAT", " ", escape_double = FALSE, trim_ws = TRUE)
Bio = two_markets[,1:3]
Energy = two_markets[,4:5]
ccal<-cc(X=Bio,Y = Energy)
matcor(Bio,Energy)
ccal$cor
#Test
ev <- (1 - ccal$cor^2)
n <- dim(Bio)[1]
p <- length(Bio)
q <- length(Energy)
k <- min(p, q)
m <- n - 3/2 - (p + q)/2
w <- rev(cumprod(rev(ev)))
df = (p-1+1)*(q-1+1)
t1stat = -log(w[1])*(m)
t1critical = qchisq(1-0.05,df)
m <- n - 3/2 - (p + q)/2
t2stat = -log(w[2])*m
p = p-1;q=q-1
df = (p-1+1)*(q-1+1)
t2critical = qchisq(1-0.05,df)
colnames(ccal$xcoef) <- paste0("U", 1:3)
kable(ccal$xcoef)
two_markets <- read_delim("two-markets.DAT", " ", escape_double = FALSE, trim_ws = TRUE)
Bio = two_markets[,1:3]
Energy = two_markets[,4:5]
ccal<-cc(X=Bio,Y = Energy)
matcor(Bio,Energy)
ccal$cor
#Test
ev <- (1 - ccal$cor^2)
n <- dim(Bio)[1]
p <- length(Bio)
q <- length(Energy)
k <- min(p, q)
m <- n - 3/2 - (p + q)/2
w <- rev(cumprod(rev(ev)))
df = (p-1+1)*(q-1+1)
t1stat = -log(w[1])*(m)
t1critical = qchisq(1-0.05,df)
m <- n - 3/2 - (p + q)/2
t2stat = -log(w[2])*m
p = p-1;q=q-1
df = (p-1+1)*(q-1+1)
t2critical = qchisq(1-0.05,df)
colnames(ccal$xcoef) <- paste0("U", 1:2)
kable(ccal$xcoef)
ccal$ycoef
colnames(ccal$xcoef) <- paste0("U", 1:2)
kable(ccal$xcoef)
colnames(ccal$ycoef) <- paste0("V", 1:2)
kable(ccal$ycoef)
rho_u_x1 <- ccal$scores$corr.X.xscores
colnames(rho_u_x1) <- paste0("U", 1:3)
rho_u_x1 <- ccal$scores$corr.X.xscores
colnames(rho_u_x1) <- paste0("U", 1:2)
kable(rho_u_x1)
rho_u_x1 <- ccal$scores$corr.Y.xscores
colnames(rho_u_x1) <- paste0("U", 1:2)
kable(rho_u_x1)
rho_v_x1 <- cca1$scores$corr.X.yscores
colnames(rho_v_x1) <- paste0("V", 1:2)
rho_v_x1 <- cca1$scores$corr.X.yscores
rho_v_x1 <- ccal$scores$corr.X.yscores
colnames(rho_v_x1) <- paste0("V", 1:2)
kable(rho_v_x1)
x1 = c(12, 18)
x2 = c(36, 24)
sp = matrix(c(2.4,1.7,1.7,3.4), ncol=2)
d = x1-x2
n1 = 400
n2 = 133
d
T2 = d%*%solve((1/n1+1/n2)*sp)%*%t(dd) # 29455.07
T2 = d%*%solve((1/n1+1/n2)*sp)%*%t(d) # 29455.07
T2 = d%*%solve((1/n1+1/n2)*sp)%*%d # 29455.07
T2
critical = ((n1+n2-2)*p/(n1+n2-p-1))*qf(1-0.05,2,530)
critical = ((n1+n2-2)*p/(n1+n2-p-1))*qf(1-0.05,2,n1+n2-p-1)
l = t(x1-x2)%*%solve(sp)
r = t(x1-x2)%*%solve(sp)%*%(x1+x2)
R = log((1/2)*(1/3))
l = t(x1-x2)%*%solve(sp)
r = t(x1-x2)%*%solve(sp)%*%(x1+x2)
R = log((1/2)*(1/3))
RR=R+r
l
r
R
RR
r = 0.5*t(x1-x2)%*%solve(sp)%*%(x1+x2)
R = log((1/2)*(1/3))
RR=R+r
r
R
RR
t(l)%*%c(18,24)
t(t(l))%*%c(18,24)
t(t(l))%*%c(18,24)>=1
t(t(l))%*%c(18,24)>=RR
t(t(l))%*%c(18,24)
D  = as.matrix(c(0.6,-8.4,-0.1,-10.7))
D
sd = cov(d)
sd = cov(d,d)
sd
sd = cov(d)
sd = as.matrix(rbind(c(5,0,1,0),c(0,2,-1,1),c(1,-1,4,1),c(0,1,1,4)))
sd
p = 4;n = 61
d= as.matrix(c(0.6,-8.4,-0.1,-10.7))
T2 =n*t(d)%*%solve(sd)%*%d
T2
qf(1-0.05, p, n-p)*(n-1)*p/(n-p)
d[1]
cv = qt(1-0.05/8, 60)
s1 = sd[1,1]
s1
s1 = sd[1,1]
c(d[1]-cv*sqrt(s1/n),d[1]-cv*sqrt(s1/n))
cv = qt(1-0.05/8, 60)
#Drama
s1 = sd[1,1]
c(d[1]-cv*sqrt(s1/n),d[1]+cv*sqrt(s1/n))
#Horror
s2 = sd[2,2]
c(d[2]-cv*sqrt(s2/n),d[2]+cv*sqrt(s2/n))
#Action
s3 = sd[3,3]
c(d[3]-cv*sqrt(s3/n),d[3]+cv*sqrt(s4/n))
#Comedy
s4 = sd[4,4]
c(d[4]-cv*sqrt(s4/n),d[4]+cv*sqrt(s4/n))
s4 = sd[4,4]
c(d[4]-cv*sqrt(s4/n),d[4]+cv*sqrt(s4/n))
cv = qt(1-0.05/8, 60)
#Drama
s1 = sd[1,1]
c(d[1]-cv*sqrt(s1/n),d[1]+cv*sqrt(s1/n))
#Horror
s2 = sd[2,2]
c(d[2]-cv*sqrt(s2/n),d[2]+cv*sqrt(s2/n))
#Action
s3 = sd[3,3]
c(d[3]-cv*sqrt(s3/n),d[3]+cv*sqrt(s3/n))
#Comedy
s4 = sd[4,4]
c(d[4]-cv*sqrt(s4/n),d[4]+cv*sqrt(s4/n))
