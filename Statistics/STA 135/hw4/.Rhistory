testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_3 = knn(
# Note the use of [ ] rather than $ or [[ ]].
#
# The knn() function expects a matrix or data frame for the train and test
# arguments. Using $ or [[ ]] would get a vector rather than a data frame.
#
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 3
)
# Confusion matrix.
knn_con_3 = table(true = testset$Species, model = knn_pred_3)
## KNN  2
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_2 = knn(
# Note the use of [ ] rather than $ or [[ ]].
#
# The knn() function expects a matrix or data frame for the train and test
# arguments. Using $ or [[ ]] would get a vector rather than a data frame.
#
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 2
)
# Confusion matrix.
knn_con_2 = table(true = testset$Species, model = knn_pred_2)
## KNN  1
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_1 = knn(
# Note the use of [ ] rather than $ or [[ ]].
#
# The knn() function expects a matrix or data frame for the train and test
# arguments. Using $ or [[ ]] would get a vector rather than a data frame.
#
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 1
)
# Confusion matrix.
knn_con_1 = table(true = testset$Species, model = knn_pred_1)
knn_con_1
knn_con_2
knn_con_3
knn_pred_1
knn_pred_1
knn_pred_1
prob<-attr(knn_pred_3,'prob')
prob
prob<-attr(knn_pred_3,"prob")
prob
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_3 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 3,prob = T
)
# Confusion matrix.
knn_con_3 = table(true = testset$Species, model = knn_pred_3)
prob<-attr(knn_pred_3,"prob")
prob
prob<-attr(knn_pred_3,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr2 <- prediction(prob, testset$Species)
prf1 <- performance(pr2, measure = "tpr", x.measure = "fpr")
plot(prf2,add=TRUE,col='blue')
prf2 <- performance(pr2, measure = "tpr", x.measure = "fpr")
plot(prf2,add=TRUE,col='blue')
library(ROCR)
library(class)
## Part I
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
## Part II
# Fit logistic model on training data. Use family = binomial for logistic.
log_model = glm(Species ~ Sepal.Length, data = trainset,
family = binomial)
log_pred = predict(log_model, testset, type = "response")
# Convert predictions to 1 or 2, for category 1 or 2 respectively.
log_pred = (log_pred > 0.5) + 1
# Convert predictions to spam or ham, same category order as original data.
log_pred = levels(trainset$Species)[log_pred]
# Make a confusion matrix by tabulating true classes against predicted classes.
log_con = table(true = testset$Species, model = log_pred)
# ROC
logpred = predict(log_model, testset, type = "response")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr <- prediction(logpred, testset$Species)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf,col='black',main = "ROC of Three classification Method")
## Part III
## linear discriminant analysis
library(MASS)
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
# Fitting LDA
lda_model = lda(Species ~ Sepal.Length, data = trainset)
lda_pred = predict(lda_model, testset, type = "response")$class
# Make a confusion matrix by tabulating true classes against predicted classes.
lda_con = table(true = testset$Species, model = lda_pred)
ldapred = predict(lda_model, testset, type = "response")$posterior[,2]
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr1 <- prediction(ldapred, testset$Species)
prf1 <- performance(pr1, measure = "tpr", x.measure = "fpr")
plot(prf1,add=TRUE,col='red')
## Part IV
## k-NN classification
## KNN  3
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_3 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 3,prob = T
)
# Confusion matrix.
knn_con_3 = table(true = testset$Species, model = knn_pred_3)
#ROC
prob<-attr(knn_pred_3,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr2 <- prediction(prob, testset$Species)
prf2 <- performance(pr2, measure = "tpr", x.measure = "fpr")
plot(prf2,add=TRUE,col='blue')
## KNN  2
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_2 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 2,prob = T
)
# Confusion matrix.
knn_con_2 = table(true = testset$Species, model = knn_pred_2)
#ROC
prob<-attr(knn_pred_2,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr3 <- prediction(prob, testset$Species)
prf3 <- performance(pr3, measure = "tpr", x.measure = "fpr")
plot(prf3,add=TRUE,col='green')
## KNN  1
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_1 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 1,prob = T
)
# Confusion matrix.
knn_con_1 = table(true = testset$Species, model = knn_pred_1)
#ROC
prob<-attr(knn_pred_1,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr4 <- prediction(prob, testset$Species)
prf4 <- performance(pr4, measure = "tpr", x.measure = "fpr")
plot(prf4,add=TRUE,col='yellow')
legend('bottomright',c("Logistic Regression","linear discriminant analysis","3-NN classification","2-NN classification","1-NN classification"),lty=c(0.5,0.5),lwd=c(1.5,1.5),col=c('black','red','blue','green','yellow'))
legend('bottomright',c("Logistic Regression","linear discriminant analysis","3-NN classification","2-NN classification","1-NN classification"),lty=c(1,1),lwd=c(1.5,1.5),col=c('black','red','blue','green','yellow'))
library(ROCR)
library(class)
## Part I
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
## Part II
# Fit logistic model on training data. Use family = binomial for logistic.
log_model = glm(Species ~ Sepal.Length, data = trainset,
family = binomial)
log_pred = predict(log_model, testset, type = "response")
# Convert predictions to 1 or 2, for category 1 or 2 respectively.
log_pred = (log_pred > 0.5) + 1
# Convert predictions to spam or ham, same category order as original data.
log_pred = levels(trainset$Species)[log_pred]
# Make a confusion matrix by tabulating true classes against predicted classes.
log_con = table(true = testset$Species, model = log_pred)
# ROC
logpred = predict(log_model, testset, type = "response")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr <- prediction(logpred, testset$Species)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf,col='black',main = "ROC of Three classification Method")
## Part III
## linear discriminant analysis
library(MASS)
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
# Fitting LDA
lda_model = lda(Species ~ Sepal.Length, data = trainset)
lda_pred = predict(lda_model, testset, type = "response")$class
# Make a confusion matrix by tabulating true classes against predicted classes.
lda_con = table(true = testset$Species, model = lda_pred)
ldapred = predict(lda_model, testset, type = "response")$posterior[,2]
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr1 <- prediction(ldapred, testset$Species)
prf1 <- performance(pr1, measure = "tpr", x.measure = "fpr")
plot(prf1,add=TRUE,col='red')
## Part IV
## k-NN classification
## KNN  3
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_3 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 3,prob = T
)
# Confusion matrix.
knn_con_3 = table(true = testset$Species, model = knn_pred_3)
#ROC
prob<-attr(knn_pred_3,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr2 <- prediction(prob, testset$Species)
prf2 <- performance(pr2, measure = "tpr", x.measure = "fpr")
plot(prf2,add=TRUE,col='blue')
## KNN  2
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_2 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 2,prob = T
)
# Confusion matrix.
knn_con_2 = table(true = testset$Species, model = knn_pred_2)
#ROC
prob<-attr(knn_pred_2,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr3 <- prediction(prob, testset$Species)
prf3 <- performance(pr3, measure = "tpr", x.measure = "fpr")
plot(prf3,add=TRUE,col='green')
## KNN  1
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_1 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 1,prob = T
)
# Confusion matrix.
knn_con_1 = table(true = testset$Species, model = knn_pred_1)
#ROC
prob<-attr(knn_pred_1,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr4 <- prediction(prob, testset$Species)
prf4 <- performance(pr4, measure = "tpr", x.measure = "fpr")
plot(prf4,add=TRUE,col='purple')
legend('bottomright',c("Logistic Regression","linear discriminant analysis","3-NN classification","2-NN classification","1-NN classification"),lty=c(1,1),lwd=c(1.5,1.5),col=c('black','red','blue','green','purple'))
library(ROCR)
library(class)
## Part I
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
## Part II
# Fit logistic model on training data. Use family = binomial for logistic.
log_model = glm(Species ~ Sepal.Length, data = trainset,
family = binomial)
log_pred = predict(log_model, testset, type = "response")
# Convert predictions to 1 or 2, for category 1 or 2 respectively.
log_pred = (log_pred > 0.5) + 1
# Convert predictions to spam or ham, same category order as original data.
log_pred = levels(trainset$Species)[log_pred]
# Make a confusion matrix by tabulating true classes against predicted classes.
log_con = table(true = testset$Species, model = log_pred)
# ROC
logpred = predict(log_model, testset, type = "response")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr <- prediction(logpred, testset$Species)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf,col='black',main = "ROC of Three classification Method")
## Part III
## linear discriminant analysis
library(MASS)
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
# Fitting LDA
lda_model = lda(Species ~ Sepal.Length, data = trainset)
lda_pred = predict(lda_model, testset, type = "response")$class
# Make a confusion matrix by tabulating true classes against predicted classes.
lda_con = table(true = testset$Species, model = lda_pred)
ldapred = predict(lda_model, testset, type = "response")$posterior[,2]
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr1 <- prediction(ldapred, testset$Species)
prf1 <- performance(pr1, measure = "tpr", x.measure = "fpr")
plot(prf1,add=TRUE,col='red')
## Part IV
## k-NN classification
## KNN  3
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_3 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 3,prob = T
)
# Confusion matrix.
knn_con_3 = table(true = testset$Species, model = knn_pred_3)
#ROC
prob<-attr(knn_pred_3,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr2 <- prediction(prob, testset$Species)
prf2 <- performance(pr2, measure = "tpr", x.measure = "fpr")
plot(prf2,add=TRUE,col='blue')
## KNN  2
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_2 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 2,prob = T
)
# Confusion matrix.
knn_con_2 = table(true = testset$Species, model = knn_pred_2)
#ROC
prob<-attr(knn_pred_2,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr3 <- prediction(prob, testset$Species)
prf3 <- performance(pr3, measure = "tpr", x.measure = "fpr")
plot(prf3,add=TRUE,col='green')
## KNN  1
dat = subset(iris,iris$Species=="setosa"| iris$Species=="versicolor")
levels(dat$Species)<- list(setosa = "setosa",versicolor = "versicolor")
testsize = ceiling(nrow(dat) * 0.10)
testindex = c(
sample(which(dat$Species == "setosa"), testsize, replace = FALSE),
sample(which(dat$Species == "versicolor"), testsize, replace = FALSE)
)
testset = dat[testindex, ]
trainset = dat[-testindex, ]
knn_pred_1 = knn(
train = trainset["Sepal.Length"], # 1-col data frame
test  = testset["Sepal.Length"],  # 1-col data frame
cl    = trainset$Species,                       # vector
k     = 1,prob = T
)
# Confusion matrix.
knn_con_1 = table(true = testset$Species, model = knn_pred_1)
#ROC
prob<-attr(knn_pred_1,"prob")
levels(testset$Species)[1]=0
levels(testset$Species)[2]=1
pr4 <- prediction(prob, testset$Species)
prf4 <- performance(pr4, measure = "tpr", x.measure = "fpr")
plot(prf4,add=TRUE,col='purple')
legend('bottomright',c("Logistic Regression","linear discriminant analysis","3-NN classification","2-NN classification","1-NN classification"),lty=c(1,1),lwd=c(1.5,1.5),col=c('black','red','blue','green','purple'))
library(rstudioapi)
atxt = "Text processing is here to stay! A new lesson starts here!"
sub("new,"oldd)
grepl("[abc]{,3}")
grepl("[abc]{,3}")
x = as.matrix(1,2,3)
x = as.matrix(1,2,3)
x
a = 2
a*2
d
library(rstudioapi)
this.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(this.dir)
e6_2 = read.table(“e6_2.txt"")
