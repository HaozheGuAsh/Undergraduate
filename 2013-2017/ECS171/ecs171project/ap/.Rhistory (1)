main = "Correlogram of mtcars data”)
lower.panel=panel.ellipse, upper.panel = panel.pts,
text.panel = panel.txt,
diag.panel = panel.minmax,
main = "Correlogram of mtcars data")
corrgram(mtcars, order = FALSE,
lower.panel=panel.ellipse, upper.panel = panel.pts,
text.panel = panel.txt,
diag.panel = panel.minmax,
)
corrgram(mtcars, order = FALSE,
lower.panel=panel.ellipse, upper.panel = panel.pts,
text.panel = panel.txt,
diag.panel = panel.minmax,
main = "Correlogram of mtcars data")
install.packages(hexbin)
install.packages("hexbin")
library(hexbin)
bins = hexbin(datamat$x, datamat$y, xbins=50)
# argument xbins specifies the number of subvisions along x axis, which in turn
# determines the number of hexagonal bins
plot(bins, main = "Hexagonal binning with 10000 observations")
bins = hexbin(datamat$x, datamat$y, xbins=50)
library(hexbin)
bins = hexbin(datamat$x, datamat$y, xbins=50)
n = 10000
c1 = matrix(rnorm(n, mean=0, sd = 0.5), ncol=2)
c2 = matrix(rnorm(n, mean=3, sd = 2), ncol=2)
datamat = as.data.frame(rbind(c1,c2))
# 10000 observations from mixture of two bivariate normals with equal mixture proportions
names(datamat) = c("x","y")
with(datamat,
smoothScatter(x,y, bandwidth = 0.25, main="Scatterplot Colored by Smoothed Densities"))
library(hexbin)
bins = hexbin(datamat$x, datamat$y, xbins=50)
# argument xbins specifies the number of subvisions along x axis, which in turn
# determines the number of hexagonal bins
plot(bins, main = "Hexagonal binning with 10000 observations")
with(datamat,
smoothScatter(x,y, bandwidth = 0.25, main="Scatterplot Colored by Smoothed Densities"))
plot(bins, main = "Hexagonal binning with 10000 observations")
with(datamat,smoothScatter(x,y, bandwidth = 0.25, main="Scatterplot Colored by Smoothed Densities"))
ftable(Titanic) # plot "flattened" table Titanic
car <- read.csv("C:/Users/Ash/Google Drive/Undergraduate/Junior & Senior/Fall 2016/STA 138/sta138 project1/car.data", header=FALSE)
View(car)
ftable(car)
ftable(Titanic) # plot "flattened" table Titanic
Titanic
ftable(Titanic) # plot "flattened" table Titanic
library(vcd)
install.packages("vcd")
ftable(Titanic) # plot "flattened" table Titanic
library(vcd)
mosaic(Titanic, shade = TRUE, legend = TRUE)
mosaic(Titanic, shade = TRUE, legend = TRUE)
mosaic(~ Class + Sex + Age + Survived, data = Titanic, shade = TRUE, legend = TRUE)
ftable(Titanic) # plot "flattened" table Titanic
mosaic(~ Class + Age + Survived, data = Titanic, shade = TRUE, legend = TRUE)
mosaic(~ Class + Sex + Age + Survived, data = Titanic, shade = TRUE, legend = TRUE)
mosaic(Titanic, shade = TRUE, legend = TRUE)
mosaic(~ Class + Age + Survived, data = Titanic, shade = TRUE, legend = TRUE)
mosaic(~ Class + Sex + Age + Survived, data = Titanic, shade = TRUE, legend = TRUE)
mosaic(~ Class + Age + Survived, data = Titanic, shade = TRUE, legend = TRUE)
library(ggplot2)
data(mtcars) # cars data used earlier
library(ggplot2)
qplot(wt, mpg, data = mtcars, color = I("red"), size = I(2)) # scatterplot of mpg vs wt
qplot(wt, mpg, data = mtcars, color = cyl, size = I(2)) # color values determined by values of
qplot(wt, mpg, data = mtcars, colour = factor(cyl), size = I(2)) # cyl used as factor
qplot(wt, mpg, data = mtcars, colour = factor(cyl), geom = c("point","smooth"))
qplot(wt, mpg, data = mtcars, colour = factor(cyl)) + geom_smooth( )
qplot(wt, mpg, data = mtcars, colour = factor(cyl), geom = c("point","smooth"))
qplot(wt, mpg, data = mtcars, colour = factor(cyl)) + geom_smooth( )
qplot(wt, mpg, data = mtcars, colour = factor(cyl), geom = c("point","smooth"))
qplot(wt, mpg, data = mtcars, colour = cyl) + geom_smooth(span=2)
qplot(wt, mpg, data = mtcars, colour = factor(cyl)) + geom_smooth(span=2)
qplot(wt, mpg, data = mtcars, colour = cyl) + geom_smooth(method = "lm")
qplot(wt, mpg, data = mtcars, colour = factor(cyl)) + geom_smooth(method = "lm")
qplot(wt, mpg, data = mtcars, colour = factor(cyl)) + geom_smooth( )
qplot(wt, mpg, data = mtcars, colour = factor(cyl)) + geom_smooth(method = "lm")
qplot(wt, mpg, data = mtcars, colour = cyl) + geom_smooth(method = "lm",size=2,alpha = I(1/5))
mtcars$label=row.names(mtcars)
qplot(wt, mpg, label=label, data = mtcars) +
geom_point(colour = cyl, size = gear) +
geom_smooth(method = "lm", alpha = I(1/5)) + geom_text(size=2)
mtcars$label=row.names(mtcars)
qplot(wt, mpg, label=label, data = mtcars) +
geom_point(colour = cyl, size = gear) +
geom_smooth(method = "lm", alpha = I(1/5)) + geom_text(size=5)
mtcars$label=row.names(mtcars)
qplot(wt, mpg, label=label, data = mtcars) +
geom_smooth(method = "lm", alpha = I(1/5)) + geom_text(size=3)
geom_point(colour = cyl, size = gear) +
qplot(mpg, data = mtcars, geom="histogram", binwidth=3)
qplot(mpg, data = mtcars, geom="histogram", binwidth=3)
qplot(mpg, ..density.., data = mtcars, geom="histogram",binwidth=3)
qplot(mpg, ..density.., data = mtcars, geom="histogram",binwidth=3)
qplot(mpg, ..density.., data = mtcars, geom="histogram",binwidth=3)
qplot(mpg, data = mtcars, geom="histogram", binwidth=3, fill=factor(cyl))
qplot(mpg, data = mtcars, geom="density",bw=1.5,xlim=c(5,50))
qplot(mpg, data = mtcars, geom="histogram", binwidth=3, fill=factor(cyl))
qplot(mpg, data = mtcars, geom="density",bw=1.5,xlim=c(5,50))
qplot(mpg, data = mtcars, geom="density",bw=1.5,colour=factor(cyl),xlim=c(5,50))
qplot(mpg, data = mtcars, geom="density",bw=1.5,xlim=c(5,50),facets = . ~ cyl)
qplot(mpg, data = mtcars, geom="density",bw=1.5,colour=factor(cyl),xlim=c(5,50))
qplot(mpg, data = mtcars, geom="density",bw=1.5,xlim=c(5,50),facets = . ~ cyl)
library(ggplot2)
data(mpg) # a data set on car milage
pl.mpg = qplot(displ,hwy,data=mpg, color=factor(cyl))
pl.mpg = qplot(displ,hwy,data=mpg, color=factor(cyl))
summary(pl.mpg) # gives a summary of pl.mpg as an object
print(pl.mpg) # or, simply pl.mpg , plots the graph
qplot(mpg, data = mtcars, geom="density",bw=1.5,xlim=c(5,50),facets = . ~ cyl)
data(diamonds)
diamonds
pl.diam = ggplot(diamonds, aes(carat,price, color=cut))
ggplot(diamonds, aes(carat,price, color=cut))
data(diamonds)
pl.diam = ggplot(diamonds, aes(carat,price, color=cut))
p
p
p
bestfit = geom_smooth(method="lm", se=F, color=alpha("green",0.5), size=2)
# linear regression fit; se=T will add standard error bands, color and size control the fitted line
pl.diam + bestscatter + bestfit + scale_x_continuous(limits=c(0,4.5)) +
scale_y_continuous(limits=c(0,25000))
pl.diam + bestscatter + bestfit + scale_x_continuous(limits=c(0,4.5)) +
scale_y_continuous(limits=c(0,25000))
bestscatter = geom_point(alpha=I(1/2), shape='.', size=I(4))
bestfit = geom_smooth(method="lm", se=F, color=alpha("green",0.5), size=2)
pl.diam + bestscatter + bestfit + scale_x_continuous(limits=c(0,4.5)) +
scale_y_continuous(limits=c(0,25000))
data(diamonds)
pl.diam = ggplot(diamonds, aes(carat,price, color=cut))
bestscatter = geom_point(alpha=I(1/2), shape='.', size=I(4))
# controls appearance with specification of transparency, shape and size of the points, apart from color
bestfit = geom_smooth(method="lm", se=F, color=alpha("green",0.5), size=2)
# linear regression fit; se=T will add standard error bands, color and size control the fitted line
pl.diam + bestscatter + bestfit + scale_x_continuous(limits=c(0,4.5)) +
scale_y_continuous(limits=c(0,25000))
pl.diam + bestscatter + bestfit + scale_x_continuous(limits=c(0,4.5)) +scale_y_continuous(limits=c(0,25000))
pl.diam + bestscatter + facet_grid(cut ~ .)
pl.diam + bestscatter + facet_grid(cut ~ .) + bestfit
diamonds
pl.diam + bestscatter + facet_grid(cut ~ ., scale="free") + bestfit
pl.diam + geom_point() + scale_x_log10( ) + scale_y_log10( ) +
xlab("log10(carat)") + ylab("log10(price)") + bestfit
dfx = data.frame(x=c(3,1,5,4), y=c(2,4,6,8), label=letters[1:4]) # data frame with 4 labeled rows and 2 columns
pl.dfx = ggplot(dfx,aes(x=x,y=y,label=label)) + xlab(NULL) + ylab(NULL)
pl.dfx + geom_bar(stat="identity") + xlab("bar") # bar plot
pl.dfx + geom_point() + xlab("point") # scatter plot
pl.dfx + geom_line() + xlab("line") # line plot (connecting points ordered by x-value)
pl.dfx + geom_area() + xlab("area") # area plot
pl.dfx + geom_path() + xlab("path") # path plot (connecting successive points using the order in which they appear)
pl.dfx + geom_text() + xlab("text") # adding text (label) to points
pl.dfx + geom_tile() + xlab("tile") # tiles around points
pl.dfx + geom_polygon() + xlab("polygon") # polygon formed by connecting successive points
dfx = data.frame(x=c(3,1,5,4), y=c(2,4,6,8), label=letters[1:4]) # data frame with 4 labeled rows and 2 columns
pl.dfx = ggplot(dfx,aes(x=x,y=y,label=label)) + xlab(NULL) + ylab(NULL)
pl.dfx + geom_bar(stat="identity") + xlab("bar") # bar plot
pl.dfx + geom_point() + xlab("point") # scatter plot
pl.dfx + geom_line() + xlab("line") # line plot (connecting points ordered by x-value)
pl.dfx + geom_area() + xlab("area") # area plot
pl.dfx + geom_path() + xlab("path") # path plot (connecting successive points using the order in which they appear)
pl.dfx + geom_text() + xlab("text") # adding text (label) to points
pl.dfx + geom_tile() + xlab("tile") # tiles around points
depth.di = ggplot(diamonds,aes(depth)) + xlim(58,68)
depth.di + geom_histogram(aes(y=..density..), binwidth=0.2) + facet_grid(cut ~ .)
aes(depth)
depth.di + geom_histogram(aes(y=..density..), binwidth=0.2) + facet_grid(cut ~ .)
depth.di = ggplot(diamonds,aes(depth)) + xlim(58,68)
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "stack”)
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "dodge")
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "stack”)
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "fill”)
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "stack")
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "fill”)
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "stack")
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "fill")
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "stack")
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "fill")
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "dodge")
depth.di
depth.di + geom_histogram(aes(y=..density..), binwidth=0.2) + facet_grid(cut ~ .)
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "stack")
depth.di + geom_histogram(aes(y=..density..), binwidth=0.2) + facet_grid(cut ~ .)
diamonds
geom_histogram(aes(y=..density..), binwidth=0.2) + facet_grid(cut ~ .)
geom_histogram(aes(y=..density..), binwidth=0.2)
facet_grid(cut ~ .)
depth.di + geom_histogram(aes(y=..density..), binwidth=0.2) + facet_grid(cut ~ .)
depth.di + geom_histogram(aes(y=..density..), binwidth=0.2) + facet_grid(z ~ .)
depth.di + geom_histogram(aes(y=..density..), binwidth=0.2) + facet_grid(color ~ .)
depth.di = ggplot(diamonds,aes(depth)) + xlim(58,68)
depth.di + geom_histogram(aes(y=..density..), binwidth=0.2) + facet_grid(cut ~ .)
dfx
pl.dfx
depth.di = ggplot(diamonds,aes(depth)) + xlim(58,68)
depth.di + geom_histogram(aes(y=..density..), binwidth=0.2) + facet_grid(cut ~ .)
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "stack")
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "fill")
depth.di + geom_histogram(aes(fill=cut), binwidth=0.2, position = "dodge")+facet_grid(cut ~ .)
depcut.di = ggplot(diamonds,aes(x=cut,y=depth))
depcut.di + geom_boxplot( ) # plots boxplots for depth stratified by cut
depcut.di + aes(color=cut) + geom_boxplot( ) # use different colors for different values of cut
depcut.di + aes(color=factor(clarity)) + geom_boxplot( ) # stratify further by categorical variable clarity
depcut.di + aes(color=cut) + geom_boxplot( ) # use different colors for different values of cut
depcut.di + aes(color=factor(clarity)) + geom_boxplot( ) # stratify further by categorical variable clarity
depcut.di = ggplot(diamonds,aes(x=cut,y=depth))
depcut.di + geom_boxplot( ) # plots boxplots for depth stratified by cut
depcut.di + aes(color=factor(clarity)) + geom_boxplot( ) # stratify further by categorical variable clarity
clarity
diamonds$clarity
factor(clarity)
aes(color=factor(clarity))
depcut.di + aes(color=cut) + geom_boxplot( ) + facet_grid(clarity ~ .) # plots in a column of panels
depcut.di + aes(color=cut) + geom_boxplot( ) + facet_grid(. ~ clarity) # plots in a row of panels
depcut.di + aes(color=cut) + geom_boxplot( ) + facet_wrap(~ clarity) # better arrangement of panels
depcut.di + aes(color=cut) + geom_boxplot( ) + facet_wrap(~ clarity) # better arrangement of panels
depcut.di + aes(color=clarity) + geom_boxplot( ) # use different colors for different values of cut
depcut.di + geom_boxplot(aes(group=clarity, color=clarity)) + scale_x_discrete("clarity",breaks=c())
library(nlme) # load package nlme
data(Oxboys) # heights of boys in Oxford from the nlme package
boysOx = ggplot(Oxboys, aes(Occasion,height))
boysOx + geom_boxplot( ) # display boxplots stratified by Occasion
boysOx + geom_boxplot( ) + geom_line(aes(group=Subject),color="steelblue")
td = ggplot(diamonds,aes(table,depth))
td + geom_point() # scatter plot too crowded because of too many observations
td + geom_jitter() # jitter plot
jit = position_jitter(width=0.5) # creates a position variable that “jitters” the points over a specified width
td + geom_jitter(position=jit)
# also add transparency to the points for better visible effect
td + geom_jitter(position=jit,color=alpha("black",1/20))
td = ggplot(diamonds,aes(table,depth))
td + geom_point() # scatter plot too crowded because of too many observations
td + geom_jitter() # jitter plot
jit = position_jitter(width=0.5) # creates a position variable that “jitters” the points over a specified width
jit = position_jitter(width=0.1) # creates a position variable that “jitters” the points over a specified width
td + geom_jitter() # jitter plot
jit = position_jitter(width=0.1) # creates a position variable that “jitters” the points over a specified width
td + geom_jitter(position=jit)
di = ggplot(diamonds,aes(carat,price)) + xlim(1,3)
di + stat_bin2d(bins=20,na.rm=T) # bivariate histogram using square binning 20 x 20 bins
di + stat_bin2d(bins=20,na.rm=T,color="yellow") # adds yellow border to the bins
di + stat_bin2d(binwidth=c(0.02,200)) # bins are determined by the widths of the rectangular bins
di + stat_bin2d(binwidth=c(0.02,200), aes(fill=..density..)) # use relative frequency instead of count
di + stat_binhex(bins=20, na.rm=T) # use hexagonal binning rather than square bins
di + stat_binhex(binwidth=c(0.02,200), na.rm=T) + scale_fill_gradient(low="blue",high="red")
di + stat_binhex(bins=20, na.rm=T) # use hexagonal binning rather than square bins
di + stat_bin2d(binwidth=c(0.02,200)) # bins are determined by the widths of the rectangular bins
di + stat_bin2d(binwidth=c(0.02,200), aes(fill=..density..)) # use relative frequency instead of count
di + stat_bin2d(bins=20,na.rm=T,color="yellow") # adds yellow border to the bins
di + stat_bin2d(binwidth=c(0.02,200)) # bins are determined by the widths of the rectangular bins
di + stat_bin2d(binwidth=c(0.02,200), aes(fill=..density..)) # use relative frequency instead of count
di + stat_binhex(bins=20, na.rm=T) # use hexagonal binning rather than square bins
di + stat_binhex(binwidth=c(0.02,200), na.rm=T) + scale_fill_gradient(low="blue",high="red")
di + geom_density2d(na.rm=T) # contour plot of the density estimator
# contour plot of the density together with scatter plot
di + geom_point(na.rm=T) + stat_density2d(na.rm=T)
di + stat_density2d(na.rm=T,aes(fill=..level..),geom="polygon") # surface plot of the density
# surface plot of the density with added transparency to the surface to make
# the points underneath visible; the points are themselves made transparent
di + geom_point(na.rm=T,size=1,alpha=I(1/10)) +
stat_density2d(na.rm=T,aes(fill = ..level..,alpha=..level..), geom="polygon") +
scale_fill_gradient(low="blue",high="red")
NHANES <- read.table("C:/Users/Ash/Desktop/NHANES.Rdata", quote="\"")
View(NHANES)
NHANES <- read.table("C:/Users/Ash/Google Drive/Undergraduate/Junior & Senior/Fall 2016/STA 141/NHANES.Rdata", quote="\"")
View(NHANES)
View(NHANES)
wei_bmi1 = ggplot(NHANES,aes(x = Smoke,y= Weight))
wei_bmi1 + aes(color=Smoke) + geom_boxplot( )
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
wei_bmi1 = ggplot(NHANES,aes(x = Smoke,y= Weight))
wei_bmi1 + aes(color=Smoke) + geom_boxplot( )
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
library(rgl)
z = 3 * volcano # Exaggerate the relief of a volcano surface (data volcano is part of rgl package)
x =10 * (1:nrow(z)) # 10 meter spacing (S to N)
y = 10 * (1:ncol(z)) # 10 meter spacing (E to W)
persp3d(x, y, z, col = "red", aspect = "iso") # perspective plot of surface z on the grid of x and y
z = 5 * volcano # Exaggerate the relief of a volcano surface (data volcano is part of rgl package)
x =10 * (1:nrow(z)) # 10 meter spacing (S to N)
y = 10 * (1:ncol(z)) # 10 meter spacing (E to W)
persp3d(x, y, z, col = "blue", aspect = "iso") # perspective plot of surface z on the grid of x and y
wei_bmi1 = ggplot(NHANES,aes(x = Smoke,y= Weight))
wei_bmi1 + aes(color=Smoke) + geom_boxplot( )
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
wei_bmi1 = ggplot(NHANES,aes(x = Smoke,y= Weight))
library(vcd)
library(ggplot2)
library(corrgram)
library(car)
#load library, data
library(vcd)
library(ggplot2)
library(corrgram)
library(car)
load("NHANES.Rdata")
load("C:/Users/Ash/Google Drive/Undergraduate/Junior & Senior/Fall 2016/STA 141/NHANES.Rdata")
attach(NHANES)
#check null condition
sapply(NHANES,function(var) sum(is.na(var)))
#make levels more infomative
NHANES$Ed = factor(Ed,levels = c(0,1), labels = c("non-college","college"))
NHANES$Race = factor(Race,level = c(0,1), labels = c("Caucasian","non-Caucasian"))
attach(NHANES)
mosaic(~  Cancer.Incidence +Smoke, data = NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Cancer.Incidence+Sex,data=NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Cancer.Incidence+Ed,data=NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Cancer.Incidence+Race,data=NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Smoke + Sex , data = NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Ed + Sex , data = NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Ed + Race , data = NHANES, shade = TRUE, legend = TRUE)
corrgram(NHANES, order = FALSE, lower.panel = panel.shade, upper.panel= panel.pie,
text.panel = panel.txt, main = "Correlogram of NHANES data")
weight_bmi = ggplot(NHANES, aes(BMI,Weight))
bestscatter = geom_point(alpha=I(1), shape='.', size=I(10))
bestfit = geom_smooth(method="lm", se=F, color="blue",size=1)
weight_bmi + bestscatter + bestfit
iron_tran = ggplot(NHANES,aes(Serum.Iron,Transferin))
bestscatter1 = geom_point(alpha=I(1), shape='.', size=I(10))
bestfit1 = geom_smooth(method= "lm",se = F,color = "blue",size = 1)
iron_tran+bestscatter1+bestfit1
weight_bmi = ggplot(NHANES, aes(BMI,Weight))
bestscatter = geom_point(alpha=I(1), shape='*', size=I(10))
bestfit = geom_smooth(method="lm", se=F, color="blue",size=1)
weight_bmi + bestscatter + bestfit
weight_bmi = ggplot(NHANES, aes(BMI,Weight))
bestscatter = geom_point(alpha=I(1), shape='*', size=I(2))
weight_bmi + bestscatter + bestfit
bestfit = geom_smooth(method="lm", se=F, color="blue",size=1)
weight_bmi = ggplot(NHANES, aes(BMI,Weight))
bestfit = geom_smooth(method="lm", se=F, color="blue",size=1)
bestscatter = geom_point(alpha=I(1), shape='*', size=I(4))
weight_bmi + bestscatter + bestfit
weight_bmi = ggplot(NHANES, aes(BMI,Weight))
bestscatter = geom_point(alpha=I(1/2), shape='*', size=I(4))
weight_bmi + bestscatter + bestfit
weight_bmi = ggplot(NHANES, aes(BMI,Weight))
bestscatter = geom_point(alpha=I(1/2), shape='*', size=I(4))
bestfit = geom_smooth(method="lm", se=F, color="blue",size=1)
weight_bmi + bestscatter + bestfit
weight_bmi = ggplot(NHANES, aes(BMI,Weight))
bestscatter = geom_point(alpha=I(1), shape='*', size=I(4))
bestfit = geom_smooth(method="lm", se=F, color="blue",size=1)
weight_bmi + bestscatter + bestfit
weight_bmi = ggplot(NHANES, aes(BMI,Weight))
bestscatter = geom_point(alpha=I(1), shape='*', size=I(3))
bestfit = geom_smooth(method="lm", se=F, color="blue",size=1)
weight_bmi + bestscatter + bestfit
iron_tran = ggplot(NHANES,aes(Serum.Iron,Transferin))
bestscatter1 = geom_point(alpha=I(1), shape='*', size=I(3))
bestfit1 = geom_smooth(method= "lm",se = F,color = "blue",size = 1)
iron_tran+bestscatter1+bestfit1
wei_bmi1 = ggplot(NHANES,aes(x = Smoke,y= Weight))
wei_bmi1 + aes(color=Smoke) + geom_boxplot( )
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
wei_bmi1 + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
qplot(mpg, data = mtcars, geom="density",bw=1.5,xlim=c(5,50))
# plot the kernel density estimates for mpg for the strata created by levels of factor(cyl)
qplot(mpg, data = mtcars, geom="density",bw=1.5,colour=factor(cyl),xlim=c(5,50))
# plot the density estimates for different strata in separate panels using the argument facets
# the formulate facets = . ~ cyl determines a lattice of plots with
# number of columns corresponding to the number of distinct values of cyl
qplot(mpg, data = mtcars, geom="density",bw=1.5,xlim=c(5,50),facets = . ~ cyl)
sapply(NHANES,function(var) sum(is.na(var)))
corrgram(NHANES, order = FALSE, lower.panel = panel.shade, upper.panel= panel.pie,
text.panel = panel.txt, main = "Correlogram of NHANES data")
tbl = as.data.frame(ftable(Cancer.Incidence,Smoke,Sex))
model1 = glm(Freq~.^3,data = NHANES,family = poisson)
tbl
model1 = glm(Freq~.^3,data = tbl,family = poisson)
summary(model1)
wei_smo = ggplot(NHANES,aes(x = Smoke,y= Weight))
wei_smo + aes(color=Smoke) + geom_boxplot( )
wei_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
wei_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
wei_smo = ggplot(NHANES,aes(x = Smoke,y= Weight))
wei_smo + aes(color=Smoke) + geom_boxplot( )
wei_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
wei_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
wei_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
wei_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
age_smo = ggplot(NHANES,aes(x = Smoke,y= Age))
age_smo + aes(color=Smoke) + geom_boxplot( )
wei_smo + aes(color=Smoke) + geom_boxplot( )
wei_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
age_smo = ggplot(NHANES,aes(x = Smoke,y= Age))
age_smo + aes(color=Smoke) + geom_boxplot( )
age_smo + aes(color=Smoke) + geom_boxplot( )
age_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
age_smo + aes(color=Smoke) + geom_boxplot( )
age_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
age_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
age_smo + aes(color=Smoke) + geom_boxplot( )
age_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
age_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
mosaic(~  Cancer.Incidence +Smoke, data = NHANES, shade = TRUE, legend = TRUE)
corrgram(NHANES, order = FALSE, lower.panel = panel.shade, upper.panel= panel.pie,
text.panel = panel.txt, main = "Correlogram of NHANES data")
mosaic(~  Cancer.Incidence +Smoke, data = NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Cancer.Incidence+Sex,data=NHANES, shade = TRUE, legend = TRUE)
mosaic(~  Cancer.Incidence +Smoke, data = NHANES, shade = TRUE, legend = TRUE,labeling_args=list(rot_labels=c(bottom=90,top=90),gp_labels=(gpar(fontsize=5))))
mosaic(~  Cancer.Incidence +Smoke, data = NHANES, shade = TRUE, legend = TRUE,labeling_args=list(rot_labels=c(bottom=90,top=90),gp_labels=(gpar(fontsize=15))))
mosaic(~  Cancer.Incidence +Smoke, data = NHANES, shade = TRUE, legend = TRUE,labeling_args=list(rot_labels=c(bottom=90,top=90),gp_labels=(gpar(fontsize=10))))
mosaic(~  Cancer.Incidence +Smoke, data = NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Cancer.Incidence+Ed,data=NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Cancer.Incidence+Race,data=NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Smoke + Sex , data = NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Ed + Sex , data = NHANES, shade = TRUE, legend = TRUE)
mosaic(~ Ed + Race , data = NHANES, shade = TRUE, legend = TRUE)
corrgram(NHANES, order = FALSE, lower.panel = panel.shade, upper.panel= panel.pie,
text.panel = panel.txt, main = "Correlogram of NHANES data")
weight_bmi = ggplot(NHANES, aes(BMI,Weight))
bestscatter = geom_point(alpha=I(1), shape='*', size=I(3))
bestfit = geom_smooth(method="lm", se=F, color="blue",size=1)
weight_bmi + bestscatter + bestfit
weight_bmi = ggplot(NHANES, aes(log(BMI),log(Weight))
weight_bmi = ggplot(NHANES, aes(log(BMI),log(Weight)))
bestscatter = geom_point(alpha=I(1), shape='*', size=I(3))
bestfit = geom_smooth(method="lm", se=F, color="blue",size=1)
weight_bmi + bestscatter + bestfit
iron_tran = ggplot(NHANES,aes(log(Serum.Iron),log(Transferin))
bestscatter1 = geom_point(alpha=I(1), shape='*', size=I(3))
bestfit1 = geom_smooth(method= "lm",se = F,color = "blue",size = 1)
iron_tran+bestscatter1+bestfit1
iron_tran = ggplot(NHANES,aes(Serum.Iron,Transferin))
bestscatter1 = geom_point(alpha=I(1), shape='*', size=I(3))
iron_tran+bestscatter1+bestfit1
bestfit1 = geom_smooth(method= "lm",se = F,color = "blue",size = 1)
iron_tran = ggplot(NHANES,aes(log(Serum.Iron),log(Transferin)))
bestscatter1 = geom_point(alpha=I(1), shape='*', size=I(3))
bestfit1 = geom_smooth(method= "lm",se = F,color = "blue",size = 1)
iron_tran+bestscatter1+bestfit1
weight_bmi = ggplot(NHANES, aes(log(BMI),log(Weight)))
bestscatter = geom_point(alpha=I(1), shape='*', size=I(3))
bestfit = geom_smooth(method="lm", se=F, color="blue",size=1)
weight_bmi + bestscatter + bestfit
iron_tran = ggplot(NHANES,aes(log(Serum.Iron),log(Transferin)))
bestscatter1 = geom_point(alpha=I(1), shape='*', size=I(3))
bestfit1 = geom_smooth(method= "lm",se = F,color = "blue",size = 1)
iron_tran+bestscatter1+bestfit1
wei_smo = ggplot(NHANES,aes(x = Smoke,y= Weight))
wei_smo + aes(color=Smoke) + geom_boxplot( )
wei_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
wei_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
age_smo = ggplot(NHANES,aes(x = Smoke,y= Age))
age_smo + aes(color=Smoke) + geom_boxplot( )
age_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
age_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
wei_smo = ggplot(NHANES,aes(x = Smoke,y= Weight))
wei_smo + aes(color=Smoke) + geom_boxplot( )
wei_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
wei_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
age_smo + aes(color=Smoke) + geom_boxplot( )
age_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Sex)
age_smo + aes(color=Smoke) + geom_boxplot( ) + facet_grid(.~ Ed)
wei_smo + aes(color=Smoke) + geom_boxplot( )
tbl
tbl = as.data.frame(ftable(Cancer.Incidence,Smoke,Sex))
model1 = glm(Freq~.^3,data = tbl,family = poisson)
summary(model1)
c(exp(0.600136-1.96*0.140490),exp(0.600136+1.96*0.140490))
library(warbleR)
setwd("C:/Users/Ash/Desktop/ap")
manualoc(flim = c(0,0.28))
manualoc(flim = c(0,0.28))
library(warbleR)
manualoc(flim = c(0,0.28))
manualoc(flim = c(0,0.28))
manualoc(flim = c(0,0.28))
manualoc(flim = c(0,0.28))
a <- data.frame(read_csv("C:/Users/Ash/Desktop/ap/manualoc_output.csv"))
library(readr)
manualoc_output <- read_csv("C:/Users/Ash/Desktop/ap/manualoc_output.csv")
View(manualoc_output)
a <- data.frame(read_csv("C:/Users/Ash/Desktop/ap/manualoc_output.csv"))
result<- specan(X =a ,threshold = 15,bp = c(0, 0.28))
result<- specan(X =a ,threshold = 15,bp = c(0, 0.28))
View(a)
manualoc(flim = c(0,0.28))
file.remove("manualoc_output.csv")
manualoc(flim = c(0,0.28))
a <- data.frame(read_csv("C:/Users/Ash/Desktop/ap/manualoc_output.csv"))
View(a)
r
result<- specan(X =a ,threshold = 15,bp = c(0, 0.28))
View(result)
library(warbleR)
library(readr)
setwd("C:/Users/Ash/Desktop/ap")
file.remove("manualoc_output.csv")
manualoc(flim = c(0,0.28))
a=autodetec(rows=1,flim = c(0,0.28),threshold = 15,img = FALSE)
View(a)
View(a)
a=autodetec(sxrow = 1000,rows=1,flim = c(0,0.28),threshold = 15,img = FALSE)
View(a)
a=autodetec(sxrow = 1000,rows=2,flim = c(0,0.28),threshold = 15,img = FALSE)
View(a)
manualoc(flim = c(0,0.28),threshold = 15)
manualoc(flim = c(0,0.28))
file.remove("manualoc_output.csv")
manualoc(flim = c(0,0.28))
